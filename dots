#!/bin/bash

now=$(pwd)
choose=$1


updates(){
  # --- Updates existing folder/file(s) inside dotfile. (updating the dotfiles) ---
  doublecheck=$(gum confirm "Doing this will overwrite existing file/folder(s). Continue?")
  if [ $? -eq 0 ]; then
    config_file=$(ls $now/.config)
    themes_file=$(ls $now/.themes)
    icons_file=$(ls $now/.icons)
    fonts_file=$(ls $now/.local/share/fonts)
    rc_file=$(ls $now)

    for file in $rc_file; do 
      if [[ "$file" == *rc* ]] && [[ "$file" == .bash ]]; then
        cp -rf $HOME/$file $now
      fi 
    done
    if [ $? -eq 0 ]; then
      echo ".rc files updated"
    else
      echo ".rc fail to update"
    fi

    for file in $config_file; do 
      cp -rf $HOME/.config/$file $now/.config
    done &>/dev/null
    if [ $? -eq 0 ]; then
      echo ".config success updated"
    else
      echo ".config fail to updates"
    fi 
    
    for file in $themes_file; do 
      cp -rf $HOME/.themes/$file $now/.themes
    done &>/dev/null
    if [ $? -eq 0 ]; then
      echo ".themes success updated"
    else
      echo ".themes fail to updates"
    fi

    for file in $icons_file; do 
      cp -rf $HOME/.icons/$file $now/.icons
    done &>/dev/null
    if [ $? -eq 0 ]; then
      echo ".icons success updated"
    else
      echo ".icons fail to updates"
    fi

    for file in $fonts_file; do 
      cp -rf $HOME/.local/share/fonts/$file $now/.local/share/fonts
    done &>/dev/null
    if [ $? -eq 0 ]; then
      echo "fonts success updated"
    else
      echo "fonts fail to updates"
    fi

    exit

  else
    echo "Process Cancelled."
    exit
  fi

}

import(){
  # --- Import New file/folder(s) into dotfile

  # --- Choose What Type ----
  Rc=".rc files     ~/"
  Config="Config    ~/.config/"
  Themes="Themes    ~/.themes/"
  Icons="Icons      ~/.icons/"
  Fonts="Fonts      ~/.local/share/fonts/"
  choice_first=$(gum choose "$Rc" "$Config" "$Themes" "$Icons" "$Fonts" --limit=1 --header="From which folder you want to Import?")
  
  # --- Rc Files ---
  if [ "$choice_first" = "$Rc" ]; then
    config_file=$(ls -a $HOME | grep rc | gum choose --no-limit --header="Choose folder/file(s) you want to import")
    doublecheck=$(gum confirm "Doing this will overwrite existing file/folder(s). Continue?")
    if [ $? -eq 0 ]; then
      for file in $config_file; do 
        cp -rf $HOME/$file $now & cp -rf $HOME/.bash $now
      done &>/dev/null
      if [ $? -eq 0 ]; then
        echo ".rc success imported"
      else
        echo ".rc failed to import"
      fi
    fi

    exit

  # --- Config ----
  elif [ "$choice_first" = "$Config" ]; then
    config_file=$(ls $HOME/.config/ | gum choose --no-limit --header="Choose folder/file(s) you want to import")
    doublecheck=$(gum confirm "Doing this will overwrite existing file/folder(s). Continue?")
    if [ $? -eq 0 ]; then
      for file in $config_file; do 
        cp -rf $HOME/.config/$file $now/.config
      done &>/dev/null
      if [ $? -eq 0 ]; then
        echo ".config success imported"
      else
        echo ".config failed to import"
      fi
    fi

    exit
  

  # --- Themes ----
  elif [ "$choice_first" = "$Themes" ]; then
    config_file=$(ls $HOME/.themes | gum choose --no-limit --header="Choose folder/file(s) you want to import")
    doublecheck=$(gum confirm "Doing this will overwrite existing file/folder(s). Continue?")
    if [ $? -eq 0 ]; then
      for file in $config_file; do 
        cp -rf $HOME/.themes/$file $now/.themes
      done &>/dev/null
      if [ $? -eq 0 ]; then
        echo ".themes success imported"
      else
        echo ".themes failed to import"
      fi
    fi

    exit


  # --- Icons ----
  elif [ "$choice_first" = "$Icons" ]; then
    config_file=$(ls $HOME/.icons | gum choose --no-limit --header="Choose folder/file(s) you want to import")
    doublecheck=$(gum confirm "Doing this will overwrite existing file/folder(s). Continue?")
    if [ $? -eq 0 ]; then
      for file in $config_file; do 
        cp -rf $HOME/.icons/$file $now/.icons
      done &>/dev/null
      if [ $? -eq 0 ]; then
        echo ".icons success imported"
      else
        echo ".icons failed to import"
      fi
    fi

    exit


  # ---- Fonts ----
  elif [ "$choice_first" = "$Fonts" ]; then
    config_file=$(ls $HOME/.local/share/fonts | gum choose --no-limit --header="Choose folder/file(s) you want to import")
    doublecheck=$(gum confirm "Doing this will overwrite existing file/folder(s). Continue?")
    if [ $? -eq 0 ]; then
      for file in $config_file; do 
        cp -rf $HOME/.local/share/fonts/$file $now/.local/share/fonts
      done &>/dev/null
      if [ $? -eq 0 ]; then
        echo "fonts success imported"
      else
        echo "fonts failed to import"
      fi
    fi

    exit


  else
    echo "Process Cancelled."
    exit
  fi
  
}

export(){
  # --- Export file/folder(s) from dotfile (applying)
  
  # --- Choose how to Export ----
  choice_first=$(gum choose "All" "Choose" --limit=1 --header="Choose How You Export")
  case $choice_first in
    All)
      doublecheck=$(gum confirm "Doing this will overwrite existing folder/file(s). Continue?")
      if [ $? -eq 0 ]; then
        dotfiles=$(ls -a $now)
        for file in $dotfiles; do 
          cp -rf $now/$file $HOME
        done &>/dev/null
        if [ $? -eq 0 ]; then
          echo "dotfiles exported."
        else
          echo "faill to export dotfiles"
        fi
        
        exclude_list=$(cat $now/.dots-ignore)
        for exclude in $exclude_list; do 
          rm -rf $HOME/$exclude
        done

        exit
      else
        echo "Process Cancelled."
        exit
      fi
    
    ;;

        
    Choose)
      doublecheck=$(gum confirm "Doing this will overwrite existing folder/file(s). Continue?")
      if [ $? -eq 0 ]; then
        
        # -- Configs --
        check=$(ls $HOME/.config)
        if [ ! "$check" ]; then
          mkdir -p $HOME/.config 
        fi
        nows=$(ls $now/.config/)
        for file in $nows; do 
          cp -rf $now/.config/$file $HOME/.config
        done &>/dev/null
        if [ $? -eq 0 ]; then
          echo ".config success exported"
        else
          echo ".config failed to export"
        fi

        # -- Themes --
        check=$(ls $HOME/.themes)
        if [ ! "$check" ]; then
          mkdir -p $HOME/.themes
        fi
        themespath=$(ls $now/.themes)
        for themes in $themespath; do 
          cp -rf $now/.themes/$themes $HOME/.themes/
        done &>/dev/null
        if [ $? -eq 0 ]; then
          echo ".themes success exported"
        else
          echo ".themes failed to export"
        fi

        # -- Icons --
        check=$(ls $HOME/.icons)
        if [ ! "$check" ]; then
          mkdir -p $HOME/.icons
        fi
        iconspath=$(ls $now/.icons/)
        for icons in $iconspath; do 
          cp -rf $now/.icons/$icons $HOME/.icons/
        done &>/dev/null
        if [ $? -eq 0 ]; then
          echo ".icons success exported"
        else
          echo ".icons failed to export"
        fi

        # -- Fonts --
        check=$(ls .local/share/fonts)
        if [ ! "$check" ]; then
          mkdir -p $HOME/.local/share/fonts
        fi 
        fontspath=$(ls $now/.local/share/fonts)
        for fonts in $fontspath; do 
          cp -rf $now/.local/share/fonts/$fonts $HOME/.local/share/fonts
        done &>/dev/null
        if [ $? -eq 0 ]; then
          echo "fonts success exported"
        else
          echo "fonts failed to export"
        fi 


        exit

      else
        echo "Process Cancelled."
        exit
      fi
      ;;
  esac
}


if [ -z $choose ]; then
while true; do
clear
text="#########################################
    Dots - A simple dotfile manager
    https://github.com/veillain/dots
#########################################"
  choice=$(gum choose "Update" "Import" "Export" "Exit" --limit=1 --header="$text")
  case $choice in
    Update)
      updates
      ;;
    Import)
      import 
      ;;
    Export)
      export 
      ;;
    Exit)
      break 
      ;;
    *)
      echo "Wrong input"
      ;;
  esac
done
fi

